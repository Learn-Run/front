name: Frontend Deploy to ECR and EC2

on:
  push:
    branches:
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push Front - Main
        run: |
          docker build -t front-main:latest ./apps/pick-learn
          docker tag front-main:latest ${{ steps.login-ecr.outputs.registry }}/learn-run/front-main:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/learn-run/front-main:latest

      - name: Build & Push Front - Chat
        run: |
          docker build -t chat:latest ./apps/chat-service
          docker tag front-chat:latest ${{ steps.login-ecr.outputs.registry }}/learn-run/front-chat:latest
          docker push ${{ steps.login-ecr.outputs.registry }}/learn-run/front-chat:latest

      - name: Copy docker-compose.yml to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose-front.yml"
          target: "~/"

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            docker pull ${{ steps.login-ecr.outputs.registry }}/learn-run/front-main:latest
            docker pull ${{ steps.login-ecr.outputs.registry }}/learn-run/front-chat:latest
      
            docker-compose -f docker-compose-front.yml down
            docker-compose -f docker-compose-front.yml up -d
            docker image prune -f
