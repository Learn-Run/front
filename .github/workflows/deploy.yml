name: Frontend Deploy to ECR and EC2

on:
  push:
    branches: 
      - test

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 18

    - name: Install dependencies
      run: npm install

    - name: Detect changed apps
      id: changed
      run: |
        json=$(npx turbo run build --filter=...[HEAD^] --dry=json || echo '{}')
        changed_apps=$(echo "$json" | jq -r '.pipeline.build.inputs // [] | .[]' | grep apps/ || true)
        echo "changed=$changed_apps" >> $GITHUB_OUTPUT

    - name: Build Docker images for changed apps
      if: steps.changed.outputs.changed != ''
      run: |
        for app in ${{ steps.changed.outputs.changed }}; do
          appname=$(basename $app)
          docker build -t $appname:latest $app
          docker save $appname:latest -o $appname.tar
        done

    - name: Upload docker images to EC2
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        source: "*.tar"
        target: "~/docker-images"

    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        script: |
          cd ~/docker-images
          for image in *.tar; do
            docker load -i $image
          done
          cd ~/project
          docker-compose -f docker-compose-front.yml up -d --build
          docker image prune -f